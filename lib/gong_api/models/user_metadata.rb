=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

require 'date'

module GongAPI
  class UserMetadata
    # True if the user is active, false if not.
    attr_accessor :active

    # Creation time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);of the Gong user.
    attr_accessor :created

    # The email address of the Gong user.
    attr_accessor :email_address

    # List of email address aliases of the Gong user.
    attr_accessor :email_aliases

    # The extension number of the Gong user.
    attr_accessor :extension

    # The first name of the Gong user.
    attr_accessor :first_name

    # Gong's unique numeric identifier for the user (up to 20 digits).
    attr_accessor :id

    # The last name of the Gong user.
    attr_accessor :last_name

    # The manager ID of the Gong user.
    attr_accessor :manager_id

    # The Gong recording consent meeting link
    attr_accessor :meeting_consent_page_url

    # The list of personal meeting URLs of the Gong user.
    attr_accessor :personal_meeting_urls

    # The phone number of the Gong user.
    attr_accessor :phone_number

    attr_accessor :settings

    attr_accessor :spoken_languages

    # The job title of the Gong user.
    attr_accessor :title

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'created' => :'created',
        :'email_address' => :'emailAddress',
        :'email_aliases' => :'emailAliases',
        :'extension' => :'extension',
        :'first_name' => :'firstName',
        :'id' => :'id',
        :'last_name' => :'lastName',
        :'manager_id' => :'managerId',
        :'meeting_consent_page_url' => :'meetingConsentPageUrl',
        :'personal_meeting_urls' => :'personalMeetingUrls',
        :'phone_number' => :'phoneNumber',
        :'settings' => :'settings',
        :'spoken_languages' => :'spokenLanguages',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active' => :'Object',
        :'created' => :'Object',
        :'email_address' => :'Object',
        :'email_aliases' => :'Object',
        :'extension' => :'Object',
        :'first_name' => :'Object',
        :'id' => :'Object',
        :'last_name' => :'Object',
        :'manager_id' => :'Object',
        :'meeting_consent_page_url' => :'Object',
        :'personal_meeting_urls' => :'Object',
        :'phone_number' => :'Object',
        :'settings' => :'Object',
        :'spoken_languages' => :'Object',
        :'title' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GongAPI::UserMetadata` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GongAPI::UserMetadata`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'email_aliases')
        self.email_aliases = attributes[:'email_aliases']
      end

      if attributes.key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'manager_id')
        self.manager_id = attributes[:'manager_id']
      end

      if attributes.key?(:'meeting_consent_page_url')
        self.meeting_consent_page_url = attributes[:'meeting_consent_page_url']
      end

      if attributes.key?(:'personal_meeting_urls')
        self.personal_meeting_urls = attributes[:'personal_meeting_urls']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'settings')
        self.settings = attributes[:'settings']
      end

      if attributes.key?(:'spoken_languages')
        if (value = attributes[:'spoken_languages']).is_a?(Array)
          self.spoken_languages = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          created == o.created &&
          email_address == o.email_address &&
          email_aliases == o.email_aliases &&
          extension == o.extension &&
          first_name == o.first_name &&
          id == o.id &&
          last_name == o.last_name &&
          manager_id == o.manager_id &&
          meeting_consent_page_url == o.meeting_consent_page_url &&
          personal_meeting_urls == o.personal_meeting_urls &&
          phone_number == o.phone_number &&
          settings == o.settings &&
          spoken_languages == o.spoken_languages &&
          title == o.title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, created, email_address, email_aliases, extension, first_name, id, last_name, manager_id, meeting_consent_page_url, personal_meeting_urls, phone_number, settings, spoken_languages, title].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GongAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
