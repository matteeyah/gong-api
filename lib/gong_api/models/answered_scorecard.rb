=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

require 'date'

module GongAPI
  class AnsweredScorecard
    # The identifier of the answer of the scorecard.
    attr_accessor :answered_scorecard_id

    # The answers in the answered scorecard.
    attr_accessor :answers

    # Gong's unique numeric identifier for the call (up to 20 digits).
    attr_accessor :call_id

    # The date and time when the call was recorded in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    attr_accessor :call_start_time

    # The date and time when the review was completed and published in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    attr_accessor :review_time

    # The user Id of the team member being reviewed, who hosted the call.
    attr_accessor :reviewed_user_id

    # The user Id of the team member who answered the scorecard for the call.
    attr_accessor :reviewer_user_id

    # The identifier of the scorecard.
    attr_accessor :scorecard_id

    # Scorecard name.
    attr_accessor :scorecard_name

    attr_accessor :visibility_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'answered_scorecard_id' => :'answeredScorecardId',
        :'answers' => :'answers',
        :'call_id' => :'callId',
        :'call_start_time' => :'callStartTime',
        :'review_time' => :'reviewTime',
        :'reviewed_user_id' => :'reviewedUserId',
        :'reviewer_user_id' => :'reviewerUserId',
        :'scorecard_id' => :'scorecardId',
        :'scorecard_name' => :'scorecardName',
        :'visibility_type' => :'visibilityType'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'answered_scorecard_id' => :'Object',
        :'answers' => :'Object',
        :'call_id' => :'Object',
        :'call_start_time' => :'Object',
        :'review_time' => :'Object',
        :'reviewed_user_id' => :'Object',
        :'reviewer_user_id' => :'Object',
        :'scorecard_id' => :'Object',
        :'scorecard_name' => :'Object',
        :'visibility_type' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GongAPI::AnsweredScorecard` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GongAPI::AnsweredScorecard`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'answered_scorecard_id')
        self.answered_scorecard_id = attributes[:'answered_scorecard_id']
      end

      if attributes.key?(:'answers')
        if (value = attributes[:'answers']).is_a?(Array)
          self.answers = value
        end
      end

      if attributes.key?(:'call_id')
        self.call_id = attributes[:'call_id']
      end

      if attributes.key?(:'call_start_time')
        self.call_start_time = attributes[:'call_start_time']
      end

      if attributes.key?(:'review_time')
        self.review_time = attributes[:'review_time']
      end

      if attributes.key?(:'reviewed_user_id')
        self.reviewed_user_id = attributes[:'reviewed_user_id']
      end

      if attributes.key?(:'reviewer_user_id')
        self.reviewer_user_id = attributes[:'reviewer_user_id']
      end

      if attributes.key?(:'scorecard_id')
        self.scorecard_id = attributes[:'scorecard_id']
      end

      if attributes.key?(:'scorecard_name')
        self.scorecard_name = attributes[:'scorecard_name']
      end

      if attributes.key?(:'visibility_type')
        self.visibility_type = attributes[:'visibility_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      visibility_type_validator = EnumAttributeValidator.new('Object', ['OPT_IN_USERS', 'PRIVATE', 'PUBLIC'])
      return false unless visibility_type_validator.valid?(@visibility_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] visibility_type Object to be assigned
    def visibility_type=(visibility_type)
      validator = EnumAttributeValidator.new('Object', ['OPT_IN_USERS', 'PRIVATE', 'PUBLIC'])
      unless validator.valid?(visibility_type)
        fail ArgumentError, "invalid value for \"visibility_type\", must be one of #{validator.allowable_values}."
      end
      @visibility_type = visibility_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          answered_scorecard_id == o.answered_scorecard_id &&
          answers == o.answers &&
          call_id == o.call_id &&
          call_start_time == o.call_start_time &&
          review_time == o.review_time &&
          reviewed_user_id == o.reviewed_user_id &&
          reviewer_user_id == o.reviewer_user_id &&
          scorecard_id == o.scorecard_id &&
          scorecard_name == o.scorecard_name &&
          visibility_type == o.visibility_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [answered_scorecard_id, answers, call_id, call_start_time, review_time, reviewed_user_id, reviewer_user_id, scorecard_id, scorecard_name, visibility_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GongAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
