=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

require 'date'

module GongAPI
  # Aggregated activity for a user within a time period
  class AggregateActivityWithDates
    # The number of recorded calls this user hosted.
    attr_accessor :calls_as_host

    # The number of calls in which this user is participant (not host).
    attr_accessor :calls_attended

    # The number of calls in which a user gave at least one comment.
    attr_accessor :calls_comments_given

    # The number of calls in which a user received at least one comment on the users calls.
    attr_accessor :calls_comments_received

    # The number of recorded calls the user gave feedback on.
    attr_accessor :calls_gave_feedback

    # The number of calls in which someone pressed the \"Mark as reviewed\".
    attr_accessor :calls_marked_as_feedback_given

    # The number of calls in which someone pressed the “Mark as reviewed” on the users calls.
    attr_accessor :calls_marked_as_feedback_received

    # The number of recorded calls the user received feedback on.
    attr_accessor :calls_received_feedback

    # The number of recorded calls the user requested feedback on.
    attr_accessor :calls_requested_feedback

    # The number of scorecards the user completed.
    attr_accessor :calls_scorecards_filled

    # The number of calls in which someone filled a scorecard on the user's calls.
    attr_accessor :calls_scorecards_received

    # The number of calls the user shared with others outside the company.
    attr_accessor :calls_shared_externally

    # The number of calls the user shared with others inside the company.
    attr_accessor :calls_shared_internally

    # The start of the period, or the request filter's fromDate for the first period in the range, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    attr_accessor :from_date

    # The number of other users' calls the user listened to.
    attr_accessor :others_calls_listened_to

    # The number of the user's own calls the user listened to.
    attr_accessor :own_calls_listened_to

    # The end of the period, or the request filter's toDate for the last period in the range,  in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    attr_accessor :to_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'calls_as_host' => :'callsAsHost',
        :'calls_attended' => :'callsAttended',
        :'calls_comments_given' => :'callsCommentsGiven',
        :'calls_comments_received' => :'callsCommentsReceived',
        :'calls_gave_feedback' => :'callsGaveFeedback',
        :'calls_marked_as_feedback_given' => :'callsMarkedAsFeedbackGiven',
        :'calls_marked_as_feedback_received' => :'callsMarkedAsFeedbackReceived',
        :'calls_received_feedback' => :'callsReceivedFeedback',
        :'calls_requested_feedback' => :'callsRequestedFeedback',
        :'calls_scorecards_filled' => :'callsScorecardsFilled',
        :'calls_scorecards_received' => :'callsScorecardsReceived',
        :'calls_shared_externally' => :'callsSharedExternally',
        :'calls_shared_internally' => :'callsSharedInternally',
        :'from_date' => :'fromDate',
        :'others_calls_listened_to' => :'othersCallsListenedTo',
        :'own_calls_listened_to' => :'ownCallsListenedTo',
        :'to_date' => :'toDate'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'calls_as_host' => :'Object',
        :'calls_attended' => :'Object',
        :'calls_comments_given' => :'Object',
        :'calls_comments_received' => :'Object',
        :'calls_gave_feedback' => :'Object',
        :'calls_marked_as_feedback_given' => :'Object',
        :'calls_marked_as_feedback_received' => :'Object',
        :'calls_received_feedback' => :'Object',
        :'calls_requested_feedback' => :'Object',
        :'calls_scorecards_filled' => :'Object',
        :'calls_scorecards_received' => :'Object',
        :'calls_shared_externally' => :'Object',
        :'calls_shared_internally' => :'Object',
        :'from_date' => :'Object',
        :'others_calls_listened_to' => :'Object',
        :'own_calls_listened_to' => :'Object',
        :'to_date' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GongAPI::AggregateActivityWithDates` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GongAPI::AggregateActivityWithDates`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'calls_as_host')
        self.calls_as_host = attributes[:'calls_as_host']
      end

      if attributes.key?(:'calls_attended')
        self.calls_attended = attributes[:'calls_attended']
      end

      if attributes.key?(:'calls_comments_given')
        self.calls_comments_given = attributes[:'calls_comments_given']
      end

      if attributes.key?(:'calls_comments_received')
        self.calls_comments_received = attributes[:'calls_comments_received']
      end

      if attributes.key?(:'calls_gave_feedback')
        self.calls_gave_feedback = attributes[:'calls_gave_feedback']
      end

      if attributes.key?(:'calls_marked_as_feedback_given')
        self.calls_marked_as_feedback_given = attributes[:'calls_marked_as_feedback_given']
      end

      if attributes.key?(:'calls_marked_as_feedback_received')
        self.calls_marked_as_feedback_received = attributes[:'calls_marked_as_feedback_received']
      end

      if attributes.key?(:'calls_received_feedback')
        self.calls_received_feedback = attributes[:'calls_received_feedback']
      end

      if attributes.key?(:'calls_requested_feedback')
        self.calls_requested_feedback = attributes[:'calls_requested_feedback']
      end

      if attributes.key?(:'calls_scorecards_filled')
        self.calls_scorecards_filled = attributes[:'calls_scorecards_filled']
      end

      if attributes.key?(:'calls_scorecards_received')
        self.calls_scorecards_received = attributes[:'calls_scorecards_received']
      end

      if attributes.key?(:'calls_shared_externally')
        self.calls_shared_externally = attributes[:'calls_shared_externally']
      end

      if attributes.key?(:'calls_shared_internally')
        self.calls_shared_internally = attributes[:'calls_shared_internally']
      end

      if attributes.key?(:'from_date')
        self.from_date = attributes[:'from_date']
      end

      if attributes.key?(:'others_calls_listened_to')
        self.others_calls_listened_to = attributes[:'others_calls_listened_to']
      end

      if attributes.key?(:'own_calls_listened_to')
        self.own_calls_listened_to = attributes[:'own_calls_listened_to']
      end

      if attributes.key?(:'to_date')
        self.to_date = attributes[:'to_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          calls_as_host == o.calls_as_host &&
          calls_attended == o.calls_attended &&
          calls_comments_given == o.calls_comments_given &&
          calls_comments_received == o.calls_comments_received &&
          calls_gave_feedback == o.calls_gave_feedback &&
          calls_marked_as_feedback_given == o.calls_marked_as_feedback_given &&
          calls_marked_as_feedback_received == o.calls_marked_as_feedback_received &&
          calls_received_feedback == o.calls_received_feedback &&
          calls_requested_feedback == o.calls_requested_feedback &&
          calls_scorecards_filled == o.calls_scorecards_filled &&
          calls_scorecards_received == o.calls_scorecards_received &&
          calls_shared_externally == o.calls_shared_externally &&
          calls_shared_internally == o.calls_shared_internally &&
          from_date == o.from_date &&
          others_calls_listened_to == o.others_calls_listened_to &&
          own_calls_listened_to == o.own_calls_listened_to &&
          to_date == o.to_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [calls_as_host, calls_attended, calls_comments_given, calls_comments_received, calls_gave_feedback, calls_marked_as_feedback_given, calls_marked_as_feedback_received, calls_received_feedback, calls_requested_feedback, calls_scorecards_filled, calls_scorecards_received, calls_shared_externally, calls_shared_internally, from_date, others_calls_listened_to, own_calls_listened_to, to_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GongAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
