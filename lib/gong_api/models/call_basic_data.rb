=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

require 'date'

module GongAPI
  # Basic details such as call date, title, call URL, etc.
  class CallBasicData
    # The call's unique identifier in the origin recording system (typically a telephony recording system). The identifier is provided to Gong during the call creation via the Public API or through telephony systems integrations.
    attr_accessor :client_unique_id

    # Metadata as was provided to Gong during the call creation via the Public API.
    attr_accessor :custom_data

    # Call direction.
    attr_accessor :direction

    # The duration of the call, in seconds.
    attr_accessor :duration

    # Gong's unique numeric identifier for the call (up to 20 digits).
    attr_accessor :id

    # If the call is private.
    attr_accessor :is_private

    # The language codes (as defined by ISO-639-2B). E.g., eng, fre, spa, ger, and ita. Also used are und (unsupported language), and zxx (not enough speech content for identification).
    attr_accessor :language

    # Media type
    attr_accessor :media

    # The meeting provider URL on which the web conference was recorded.
    attr_accessor :meeting_url

    # The primary user ID of the team member who hosted the call.
    attr_accessor :primary_user_id

    # The purpose of the call.
    attr_accessor :purpose

    # Scheduled date and time of the call in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    attr_accessor :scheduled

    # The scope of the call: 'internal' if all the participants are from the company, 'external' if some participants are not from the company, or 'unknown' if the scope is unknown.
    attr_accessor :scope

    # The SDR disposition of the call
    attr_accessor :sdr_disposition

    # The date and time when the call was recorded in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    attr_accessor :started

    # The system with which the call was carried out (e.g., WebEx, ShoreTel, etc.).
    attr_accessor :system

    # The title of the call.
    attr_accessor :title

    # The URL to the page in the Gong web application where the call is available.
    attr_accessor :url

    # Gong's unique numeric identifier for the call's workspace (up to 20 digits).
    attr_accessor :workspace_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_unique_id' => :'clientUniqueId',
        :'custom_data' => :'customData',
        :'direction' => :'direction',
        :'duration' => :'duration',
        :'id' => :'id',
        :'is_private' => :'isPrivate',
        :'language' => :'language',
        :'media' => :'media',
        :'meeting_url' => :'meetingUrl',
        :'primary_user_id' => :'primaryUserId',
        :'purpose' => :'purpose',
        :'scheduled' => :'scheduled',
        :'scope' => :'scope',
        :'sdr_disposition' => :'sdrDisposition',
        :'started' => :'started',
        :'system' => :'system',
        :'title' => :'title',
        :'url' => :'url',
        :'workspace_id' => :'workspaceId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'client_unique_id' => :'Object',
        :'custom_data' => :'Object',
        :'direction' => :'Object',
        :'duration' => :'Object',
        :'id' => :'Object',
        :'is_private' => :'Object',
        :'language' => :'Object',
        :'media' => :'Object',
        :'meeting_url' => :'Object',
        :'primary_user_id' => :'Object',
        :'purpose' => :'Object',
        :'scheduled' => :'Object',
        :'scope' => :'Object',
        :'sdr_disposition' => :'Object',
        :'started' => :'Object',
        :'system' => :'Object',
        :'title' => :'Object',
        :'url' => :'Object',
        :'workspace_id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GongAPI::CallBasicData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GongAPI::CallBasicData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'client_unique_id')
        self.client_unique_id = attributes[:'client_unique_id']
      end

      if attributes.key?(:'custom_data')
        self.custom_data = attributes[:'custom_data']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_private')
        self.is_private = attributes[:'is_private']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'media')
        self.media = attributes[:'media']
      end

      if attributes.key?(:'meeting_url')
        self.meeting_url = attributes[:'meeting_url']
      end

      if attributes.key?(:'primary_user_id')
        self.primary_user_id = attributes[:'primary_user_id']
      end

      if attributes.key?(:'purpose')
        self.purpose = attributes[:'purpose']
      end

      if attributes.key?(:'scheduled')
        self.scheduled = attributes[:'scheduled']
      end

      if attributes.key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.key?(:'sdr_disposition')
        self.sdr_disposition = attributes[:'sdr_disposition']
      end

      if attributes.key?(:'started')
        self.started = attributes[:'started']
      end

      if attributes.key?(:'system')
        self.system = attributes[:'system']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'workspace_id')
        self.workspace_id = attributes[:'workspace_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      direction_validator = EnumAttributeValidator.new('Object', ['Conference', 'Inbound', 'Outbound', 'Unknown'])
      return false unless direction_validator.valid?(@direction)
      media_validator = EnumAttributeValidator.new('Object', ['Audio', 'Video'])
      return false unless media_validator.valid?(@media)
      scope_validator = EnumAttributeValidator.new('Object', ['External', 'Internal', 'Unknown'])
      return false unless scope_validator.valid?(@scope)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      validator = EnumAttributeValidator.new('Object', ['Conference', 'Inbound', 'Outbound', 'Unknown'])
      unless validator.valid?(direction)
        fail ArgumentError, "invalid value for \"direction\", must be one of #{validator.allowable_values}."
      end
      @direction = direction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] media Object to be assigned
    def media=(media)
      validator = EnumAttributeValidator.new('Object', ['Audio', 'Video'])
      unless validator.valid?(media)
        fail ArgumentError, "invalid value for \"media\", must be one of #{validator.allowable_values}."
      end
      @media = media
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scope Object to be assigned
    def scope=(scope)
      validator = EnumAttributeValidator.new('Object', ['External', 'Internal', 'Unknown'])
      unless validator.valid?(scope)
        fail ArgumentError, "invalid value for \"scope\", must be one of #{validator.allowable_values}."
      end
      @scope = scope
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_unique_id == o.client_unique_id &&
          custom_data == o.custom_data &&
          direction == o.direction &&
          duration == o.duration &&
          id == o.id &&
          is_private == o.is_private &&
          language == o.language &&
          media == o.media &&
          meeting_url == o.meeting_url &&
          primary_user_id == o.primary_user_id &&
          purpose == o.purpose &&
          scheduled == o.scheduled &&
          scope == o.scope &&
          sdr_disposition == o.sdr_disposition &&
          started == o.started &&
          system == o.system &&
          title == o.title &&
          url == o.url &&
          workspace_id == o.workspace_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [client_unique_id, custom_data, direction, duration, id, is_private, language, media, meeting_url, primary_user_id, purpose, scheduled, scope, sdr_disposition, started, system, title, url, workspace_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GongAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
