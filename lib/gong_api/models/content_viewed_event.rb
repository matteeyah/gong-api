=begin
#Gong API

#<h2>Overview</h2> <p> The Gong API allows you to: </p> <ol> <li> Receive the following information from Gong: <ol type=\"a\"> <li> Your company's <a href=\"#tag--Calls\">calls</a> in Gong </li> <li> Your company's <a href=\"#tag--Users\">users</a> in Gong </li> <li> Your company's user <a href=\"#tag--Stats\">stats</a> in Gong </li> <li> Your company's user <a href=\"#tag--Settings\">settings</a> in Gong </li> <li> Your company's <a href=\"#tag--Library\">libraries</a> in Gong </li> </ol></li> <li> <a href=\"#post-/v2/calls\">Upload</a> new or  <a href=\"#put-/v2/calls/-id-/media\">update</a>  call recordings in Gong, in order to support cases where you have an internal system that records  calls or obtains them from a third-party entity. </li> <li> <a href=\"#post-/v2/data-privacy/erase-data-for-email-address\">Data Privacy</a>:  Delete users and all their associated elements.</li> <li> Upload <a href=\"#tag--CRM\">CRM</a> data into Gong.  </li> </ol> <p>Base URL for all API calls is <a href=\"https://us-55616.api.gong.io\"> https://us-55616.api.gong.io </a> </p> <h2>Authentication</h2>  <p> There are two ways to retrieve credentials to the Gong Public API: </p> <ol><li>Retrieve Manually:<br> <p> In the <a href=\"https://app.gong.io/company/api\">Gong API Page</a> (you must be a technical administrator in Gong), click \"Create\" to receive an <b>Access Key</b>  and an <b>Access Key Secret</b>.<br> </p> <p> Use the Basic Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc7617.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Basic &lt;token&gt;</code><br> </p> <p> To create the basic token, combine the <b>Access Key</b> and the <b>Access Key Secret</b> with  colon (:) and then encode in Base64 as following:<br> <code>Base64(&lt;accessKey&gt; : &lt;accessKeySecret&gt;)</code><br><br> </p></li> <li>Retrieve through OAuth<br> <p> To obtain the Bearer token, follow the steps described in the <a target=\"_blank\" href=\"https://help.gong.io/hc/en-us/articles/360056677792\">Gong OAuth Guide</a>. <br></p> <p> After obtaining the token, use the Bearer Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc6750.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Bearer &lt;token&gt;</code> </p> </li></ol> <h2>Limits</h2>  <p> By default Gong limits your company's access to the service to 3 API calls per second, and 10,000 API calls per day. </p> <p> When the rate of API calls exceeds these limits an HTTP status code <b>429</b> is returned and a <b>Retry-After</b> header indicates  how many seconds to wait before making a new request. </p><p> If required, contact help@gong.io to change these limits. </p>  <h2>Cursors</h2>  <p> Some API calls that return a list are limited in the amount of records they may return, so multiple API calls may be  required to bring all records. Such an API call also returns a <b>records</b> field, which contains the number of records  in the current page, the current page number and the total number of records. </p> <p> In cases where the total number of records exceeds the number of records thus far retrieved, the <b>records</b> field will also  contain a <b>cursor</b> field which can be used to access the next page of records. To retrieve the next page, repeat the API call with  the <b>cursor</b> value as supplied by the previous API call. All other request inputs should remain the same. </p> <h2>Forward Compatibility</h2>  <p> When coding a system to accept Gong data, take into account that Gong may, without prior warning, add fields to the JSON output.  It is recommended to future proof your code so that it disregards all JSON fields you don't actually use.  </p><p></p>

OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

require 'date'

module GongAPI
  # Content Viewed event
  class ContentViewedEvent
    # Platform on which the interaction was made
    attr_accessor :agent_platform

    # The id of the content that was viewed in the reporting system.
    attr_accessor :content_id

    # A list of additional properties for the content
    attr_accessor :content_properties

    # Human readable title of the content.
    attr_accessor :content_title

    # The url of the content that was viewed in the reporting system. This is the url that is was accessed by the viewer.
    attr_accessor :content_url

    # A list of references to external systems such as CRM, Telephony System, Case Management, etc.
    attr_accessor :crm_context

    # The original id of the event as designated in the reporting system.
    attr_accessor :event_id

    # A list of additional properties for the event
    attr_accessor :event_properties

    # The date and time when the event happened in the ISO-8601 format (e.g., '2021-08-01T02:30:00+05:00' or '2021-08-01T08:00:00Z', where Z stands for UTC);
    attr_accessor :event_timestamp

    # The application identification string in case of interaction via mobile application (bundle identifier or package name).
    attr_accessor :mobile_app_id

    # The unique identifier of the reporting system. It is the same value in all events originating from the same system.
    attr_accessor :reporting_system

    # The id of the share action that corresponds to this view event, in case there can be more than one share per content.
    attr_accessor :share_id

    # \"User-Agent\" header value for browser based interaction
    attr_accessor :user_agent

    # The name of the action like \"Document Viewed\" or \"Presentation Opened\".
    attr_accessor :view_action_title

    # The link to a page that presents additional information about this event.
    attr_accessor :view_info_url

    attr_accessor :viewer

    # Optional workspace identifier. If specified, the event will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.
    attr_accessor :workspace_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'agent_platform' => :'agentPlatform',
        :'content_id' => :'contentId',
        :'content_properties' => :'contentProperties',
        :'content_title' => :'contentTitle',
        :'content_url' => :'contentUrl',
        :'crm_context' => :'crmContext',
        :'event_id' => :'eventId',
        :'event_properties' => :'eventProperties',
        :'event_timestamp' => :'eventTimestamp',
        :'mobile_app_id' => :'mobileAppId',
        :'reporting_system' => :'reportingSystem',
        :'share_id' => :'shareId',
        :'user_agent' => :'userAgent',
        :'view_action_title' => :'viewActionTitle',
        :'view_info_url' => :'viewInfoUrl',
        :'viewer' => :'viewer',
        :'workspace_id' => :'workspaceId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'agent_platform' => :'Object',
        :'content_id' => :'Object',
        :'content_properties' => :'Object',
        :'content_title' => :'Object',
        :'content_url' => :'Object',
        :'crm_context' => :'Object',
        :'event_id' => :'Object',
        :'event_properties' => :'Object',
        :'event_timestamp' => :'Object',
        :'mobile_app_id' => :'Object',
        :'reporting_system' => :'Object',
        :'share_id' => :'Object',
        :'user_agent' => :'Object',
        :'view_action_title' => :'Object',
        :'view_info_url' => :'Object',
        :'viewer' => :'Object',
        :'workspace_id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GongAPI::ContentViewedEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GongAPI::ContentViewedEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'agent_platform')
        self.agent_platform = attributes[:'agent_platform']
      end

      if attributes.key?(:'content_id')
        self.content_id = attributes[:'content_id']
      end

      if attributes.key?(:'content_properties')
        if (value = attributes[:'content_properties']).is_a?(Array)
          self.content_properties = value
        end
      end

      if attributes.key?(:'content_title')
        self.content_title = attributes[:'content_title']
      end

      if attributes.key?(:'content_url')
        self.content_url = attributes[:'content_url']
      end

      if attributes.key?(:'crm_context')
        if (value = attributes[:'crm_context']).is_a?(Array)
          self.crm_context = value
        end
      end

      if attributes.key?(:'event_id')
        self.event_id = attributes[:'event_id']
      end

      if attributes.key?(:'event_properties')
        if (value = attributes[:'event_properties']).is_a?(Array)
          self.event_properties = value
        end
      end

      if attributes.key?(:'event_timestamp')
        self.event_timestamp = attributes[:'event_timestamp']
      end

      if attributes.key?(:'mobile_app_id')
        self.mobile_app_id = attributes[:'mobile_app_id']
      end

      if attributes.key?(:'reporting_system')
        self.reporting_system = attributes[:'reporting_system']
      end

      if attributes.key?(:'share_id')
        self.share_id = attributes[:'share_id']
      end

      if attributes.key?(:'user_agent')
        self.user_agent = attributes[:'user_agent']
      end

      if attributes.key?(:'view_action_title')
        self.view_action_title = attributes[:'view_action_title']
      end

      if attributes.key?(:'view_info_url')
        self.view_info_url = attributes[:'view_info_url']
      end

      if attributes.key?(:'viewer')
        self.viewer = attributes[:'viewer']
      end

      if attributes.key?(:'workspace_id')
        self.workspace_id = attributes[:'workspace_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @content_id.nil?
        invalid_properties.push('invalid value for "content_id", content_id cannot be nil.')
      end

      if @content_title.nil?
        invalid_properties.push('invalid value for "content_title", content_title cannot be nil.')
      end

      if @content_url.nil?
        invalid_properties.push('invalid value for "content_url", content_url cannot be nil.')
      end

      if @event_timestamp.nil?
        invalid_properties.push('invalid value for "event_timestamp", event_timestamp cannot be nil.')
      end

      if @reporting_system.nil?
        invalid_properties.push('invalid value for "reporting_system", reporting_system cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      agent_platform_validator = EnumAttributeValidator.new('Object', ['Android', 'Linux', 'MacOS', 'Windows', 'iOS'])
      return false unless agent_platform_validator.valid?(@agent_platform)
      return false if @content_id.nil?
      return false if @content_title.nil?
      return false if @content_url.nil?
      return false if @event_timestamp.nil?
      return false if @reporting_system.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] agent_platform Object to be assigned
    def agent_platform=(agent_platform)
      validator = EnumAttributeValidator.new('Object', ['Android', 'Linux', 'MacOS', 'Windows', 'iOS'])
      unless validator.valid?(agent_platform)
        fail ArgumentError, "invalid value for \"agent_platform\", must be one of #{validator.allowable_values}."
      end
      @agent_platform = agent_platform
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          agent_platform == o.agent_platform &&
          content_id == o.content_id &&
          content_properties == o.content_properties &&
          content_title == o.content_title &&
          content_url == o.content_url &&
          crm_context == o.crm_context &&
          event_id == o.event_id &&
          event_properties == o.event_properties &&
          event_timestamp == o.event_timestamp &&
          mobile_app_id == o.mobile_app_id &&
          reporting_system == o.reporting_system &&
          share_id == o.share_id &&
          user_agent == o.user_agent &&
          view_action_title == o.view_action_title &&
          view_info_url == o.view_info_url &&
          viewer == o.viewer &&
          workspace_id == o.workspace_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [agent_platform, content_id, content_properties, content_title, content_url, crm_context, event_id, event_properties, event_timestamp, mobile_app_id, reporting_system, share_id, user_agent, view_action_title, view_info_url, viewer, workspace_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GongAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
