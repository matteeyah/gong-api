=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

require 'date'

module GongAPI
  # New call metadata
  class NewCallAddingRequest
    # The actual date and time when the call started in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);
    attr_accessor :actual_start

    # The code identifies the provider conferencing or telephony system. For example: zoom, clearslide, gotomeeting, ringcentral, outreach, insidesales, etc. These values are predefined by Gong, please contact help@gong.io to find the proper value for your system.
    attr_accessor :call_provider_code

    # A call's unique identifier in the PBX or the recording system. Gong uses this identifier to prevent repeated attempts to upload the same recording.
    attr_accessor :client_unique_id

    # A list of references to external systems such as CRM, Telephony System, Case Management, etc.
    attr_accessor :context

    # Optional metadata associated with the call (represented as text). Gong stores this metadata and it can be used for troubleshooting.
    attr_accessor :custom_data

    # Whether the call is inbound (someone called the company), outbound (a rep dialed someone outside the company), or a conference call.
    attr_accessor :direction

    # The disposition of the call. The disposition is free text of up to 255 characters.
    attr_accessor :disposition

    # The URL from which Gong can download the media file. The URL must be unique, the audio or video file must be a maximum of 1.5GB. If you provide this URL, you should not perform the 'Add call media' step.
    attr_accessor :download_media_url

    # The actual call duration in seconds.
    attr_accessor :duration

    # The language code the call should be transcribed to. This field is optional as Gong automatically detects the language spoken in the call and transcribes it accordingly. Set this field only if you are sure of the language the call is in. Valid values are: af-ZA, am-ET, ar-AE, ar-BH, ar-DZ, ar-EG, ar-IL, ar-IQ, ar-JO, ar-KW, ar-LB, ar-MA, ar-MR, ar-OM, ar-PS, ar-QA, ar-SA, ar-TN, ar-YE, az-AZ, bg-BG, bn-BD, bn-IN, bs-BA, ca-ES, cs-CZ, da-DK, de-AT, de-CH, de-DE, el-GR, en-AB, en-AU, en-CA, en-GB, en-IE, en-IN, en-NZ, en-PH, en-SG, en-US, en-WL, en-ZA, es-AR, es-BO, es-CL, es-CO, es-CR, es-DO, es-EC, es-ES, es-GT, es-HN, es-MX, es-NI, es-PA, es-PE, es-PR, es-PY, es-SV, es-US, es-UY, et-EE, eu-ES, fa-IR, fi-FI, fil-PH, fr-BE, fr-CA, fr-CH, fr-FR, gl-ES, gu-IN, he-IL, hi-IN, hr-HR, hu-HU, hy-AM, id-ID, is-IS, it-CH, it-IT, ja-JP, jv-ID, ka-GE, kk-KZ, km-KH, kn-IN, ko-KR, lo-LA, lt-LT, lv-LV, mk-MK, ml-IN, mn-MN, mr-IN, ms-MY, my-MM, ne-NP, nl-BE, nl-NL, no-NO, pa-Guru-IN, pl-PL, pt-BR, pt-PT, ro-RO, ru-RU, si-LK, sk-SK, sl-SI, sq-AL, sr-RS, su-ID, sv-SE, sw-KE, sw-TZ, ta-IN, ta-LK, ta-MY, ta-SG, te-IN, th-TH, tr-TR, uk-UA, ur-IN, ur-PK, uz-UZ, vi-VN, yue-Hant-HK, zh-CN, zh-TW, zu-ZA
    attr_accessor :language_code

    # The URL of the conference call by which users join the meeting
    attr_accessor :meeting_url

    # A list of the call's participants. A party must be provided for the primaryUser.
    attr_accessor :parties

    # The Gong internal user ID of the team member who hosted the call.
    attr_accessor :primary_user

    # The purpose of the call. This optional field is a free text of up to 255 characters.
    attr_accessor :purpose

    # The date and time the call was scheduled to end in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);
    attr_accessor :scheduled_end

    # The date and time the call was scheduled to begin in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);
    attr_accessor :scheduled_start

    attr_accessor :speakers_timeline

    # The title of the call. This title is available in the Gong system for indexing and search.
    attr_accessor :title

    # Optional workspace identifier. If specified, the call will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.
    attr_accessor :workspace_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actual_start' => :'actualStart',
        :'call_provider_code' => :'callProviderCode',
        :'client_unique_id' => :'clientUniqueId',
        :'context' => :'context',
        :'custom_data' => :'customData',
        :'direction' => :'direction',
        :'disposition' => :'disposition',
        :'download_media_url' => :'downloadMediaUrl',
        :'duration' => :'duration',
        :'language_code' => :'languageCode',
        :'meeting_url' => :'meetingUrl',
        :'parties' => :'parties',
        :'primary_user' => :'primaryUser',
        :'purpose' => :'purpose',
        :'scheduled_end' => :'scheduledEnd',
        :'scheduled_start' => :'scheduledStart',
        :'speakers_timeline' => :'speakersTimeline',
        :'title' => :'title',
        :'workspace_id' => :'workspaceId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'actual_start' => :'Object',
        :'call_provider_code' => :'Object',
        :'client_unique_id' => :'Object',
        :'context' => :'Object',
        :'custom_data' => :'Object',
        :'direction' => :'Object',
        :'disposition' => :'Object',
        :'download_media_url' => :'Object',
        :'duration' => :'Object',
        :'language_code' => :'Object',
        :'meeting_url' => :'Object',
        :'parties' => :'Object',
        :'primary_user' => :'Object',
        :'purpose' => :'Object',
        :'scheduled_end' => :'Object',
        :'scheduled_start' => :'Object',
        :'speakers_timeline' => :'Object',
        :'title' => :'Object',
        :'workspace_id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GongAPI::NewCallAddingRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GongAPI::NewCallAddingRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'actual_start')
        self.actual_start = attributes[:'actual_start']
      end

      if attributes.key?(:'call_provider_code')
        self.call_provider_code = attributes[:'call_provider_code']
      end

      if attributes.key?(:'client_unique_id')
        self.client_unique_id = attributes[:'client_unique_id']
      end

      if attributes.key?(:'context')
        if (value = attributes[:'context']).is_a?(Array)
          self.context = value
        end
      end

      if attributes.key?(:'custom_data')
        self.custom_data = attributes[:'custom_data']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'disposition')
        self.disposition = attributes[:'disposition']
      end

      if attributes.key?(:'download_media_url')
        self.download_media_url = attributes[:'download_media_url']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'language_code')
        self.language_code = attributes[:'language_code']
      end

      if attributes.key?(:'meeting_url')
        self.meeting_url = attributes[:'meeting_url']
      end

      if attributes.key?(:'parties')
        if (value = attributes[:'parties']).is_a?(Array)
          self.parties = value
        end
      end

      if attributes.key?(:'primary_user')
        self.primary_user = attributes[:'primary_user']
      end

      if attributes.key?(:'purpose')
        self.purpose = attributes[:'purpose']
      end

      if attributes.key?(:'scheduled_end')
        self.scheduled_end = attributes[:'scheduled_end']
      end

      if attributes.key?(:'scheduled_start')
        self.scheduled_start = attributes[:'scheduled_start']
      end

      if attributes.key?(:'speakers_timeline')
        self.speakers_timeline = attributes[:'speakers_timeline']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'workspace_id')
        self.workspace_id = attributes[:'workspace_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @actual_start.nil?
        invalid_properties.push('invalid value for "actual_start", actual_start cannot be nil.')
      end

      if @client_unique_id.nil?
        invalid_properties.push('invalid value for "client_unique_id", client_unique_id cannot be nil.')
      end

      if @direction.nil?
        invalid_properties.push('invalid value for "direction", direction cannot be nil.')
      end

      if @parties.nil?
        invalid_properties.push('invalid value for "parties", parties cannot be nil.')
      end

      if @primary_user.nil?
        invalid_properties.push('invalid value for "primary_user", primary_user cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @actual_start.nil?
      return false if @client_unique_id.nil?
      return false if @direction.nil?
      direction_validator = EnumAttributeValidator.new('Object', ['Conference', 'Inbound', 'Outbound', 'Unknown'])
      return false unless direction_validator.valid?(@direction)
      return false if @parties.nil?
      return false if @primary_user.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      validator = EnumAttributeValidator.new('Object', ['Conference', 'Inbound', 'Outbound', 'Unknown'])
      unless validator.valid?(direction)
        fail ArgumentError, "invalid value for \"direction\", must be one of #{validator.allowable_values}."
      end
      @direction = direction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actual_start == o.actual_start &&
          call_provider_code == o.call_provider_code &&
          client_unique_id == o.client_unique_id &&
          context == o.context &&
          custom_data == o.custom_data &&
          direction == o.direction &&
          disposition == o.disposition &&
          download_media_url == o.download_media_url &&
          duration == o.duration &&
          language_code == o.language_code &&
          meeting_url == o.meeting_url &&
          parties == o.parties &&
          primary_user == o.primary_user &&
          purpose == o.purpose &&
          scheduled_end == o.scheduled_end &&
          scheduled_start == o.scheduled_start &&
          speakers_timeline == o.speakers_timeline &&
          title == o.title &&
          workspace_id == o.workspace_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [actual_start, call_provider_code, client_unique_id, context, custom_data, direction, disposition, download_media_url, duration, language_code, meeting_url, parties, primary_user, purpose, scheduled_end, scheduled_start, speakers_timeline, title, workspace_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GongAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
