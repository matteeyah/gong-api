=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

require 'date'

module GongAPI
  class Comment
    # The number of seconds from the beginning of the call that the comment ends refers to.
    attr_accessor :audio_end_time

    # The number of seconds from the beginning of the call that the comment start refers to.
    attr_accessor :audio_start_time

    # The comment itself. The comment may contains person tagging in this format @[user name](user Id)
    attr_accessor :comment

    # Unique identifier of the user who wrote the comment.
    attr_accessor :commenter_user_id

    # True if the comment was written during the call, false if it was posted after the call.
    attr_accessor :during_call

    # Unique identifier of the comment within the Gong's system.
    attr_accessor :id

    # The unique identifier of the original comment in case the current comment is a reply to the original one.
    attr_accessor :in_reply_to

    # The date and time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); in which the comment was posted.
    attr_accessor :posted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'audio_end_time' => :'audioEndTime',
        :'audio_start_time' => :'audioStartTime',
        :'comment' => :'comment',
        :'commenter_user_id' => :'commenterUserId',
        :'during_call' => :'duringCall',
        :'id' => :'id',
        :'in_reply_to' => :'inReplyTo',
        :'posted' => :'posted'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'audio_end_time' => :'Object',
        :'audio_start_time' => :'Object',
        :'comment' => :'Object',
        :'commenter_user_id' => :'Object',
        :'during_call' => :'Object',
        :'id' => :'Object',
        :'in_reply_to' => :'Object',
        :'posted' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GongAPI::Comment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GongAPI::Comment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'audio_end_time')
        self.audio_end_time = attributes[:'audio_end_time']
      end

      if attributes.key?(:'audio_start_time')
        self.audio_start_time = attributes[:'audio_start_time']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'commenter_user_id')
        self.commenter_user_id = attributes[:'commenter_user_id']
      end

      if attributes.key?(:'during_call')
        self.during_call = attributes[:'during_call']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'in_reply_to')
        self.in_reply_to = attributes[:'in_reply_to']
      end

      if attributes.key?(:'posted')
        self.posted = attributes[:'posted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          audio_end_time == o.audio_end_time &&
          audio_start_time == o.audio_start_time &&
          comment == o.comment &&
          commenter_user_id == o.commenter_user_id &&
          during_call == o.during_call &&
          id == o.id &&
          in_reply_to == o.in_reply_to &&
          posted == o.posted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [audio_end_time, audio_start_time, comment, commenter_user_id, during_call, id, in_reply_to, posted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GongAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
