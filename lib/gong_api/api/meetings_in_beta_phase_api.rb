=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

module GongAPI
  class MeetingsInBetaPhaseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a New Gong Meeting (/v2/meetings)
    # When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:create'.
    # @param body newMeetingRequest
    # @param [Hash] opts the optional parameters
    # @return [NewMeetingResponse]
    def add_meeting_using_post(body, opts = {})
      data, _status_code, _headers = add_meeting_using_post_with_http_info(body, opts)
      data
    end

    # Create a New Gong Meeting (/v2/meetings)
    # When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:meetings:user:create&#x27;.
    # @param body newMeetingRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(NewMeetingResponse, Integer, Hash)>] NewMeetingResponse data, response status code and response headers
    def add_meeting_using_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsInBetaPhaseApi.add_meeting_using_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsInBetaPhaseApi.add_meeting_using_post"
      end
      # resource path
      local_var_path = '/v2/meetings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'NewMeetingResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsInBetaPhaseApi#add_meeting_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Gong Meeting (/v2/meetings)
    # When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:delete'.
    # @param body request
    # @param meeting_id Gong&#x27;s unique identifier for the meeting (up to 20 digits).
    # @param [Hash] opts the optional parameters
    # @return [DeleteMeetingRequest]
    def delete_meeting_using_delete(body, meeting_id, opts = {})
      data, _status_code, _headers = delete_meeting_using_delete_with_http_info(body, meeting_id, opts)
      data
    end

    # Delete a Gong Meeting (/v2/meetings)
    # When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:meetings:user:delete&#x27;.
    # @param body request
    # @param meeting_id Gong&#x27;s unique identifier for the meeting (up to 20 digits).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteMeetingRequest, Integer, Hash)>] DeleteMeetingRequest data, response status code and response headers
    def delete_meeting_using_delete_with_http_info(body, meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsInBetaPhaseApi.delete_meeting_using_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsInBetaPhaseApi.delete_meeting_using_delete"
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsInBetaPhaseApi.delete_meeting_using_delete"
      end
      # resource path
      local_var_path = '/v2/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DeleteMeetingRequest' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsInBetaPhaseApi#delete_meeting_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate Gong meeting Integration (/v2/meetings/integration/status)
    # When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:integration:status'.
    # @param body integrationStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [IntegrationStatusResponse]
    def integration_status_using_post(body, opts = {})
      data, _status_code, _headers = integration_status_using_post_with_http_info(body, opts)
      data
    end

    # Validate Gong meeting Integration (/v2/meetings/integration/status)
    # When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:meetings:integration:status&#x27;.
    # @param body integrationStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationStatusResponse, Integer, Hash)>] IntegrationStatusResponse data, response status code and response headers
    def integration_status_using_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsInBetaPhaseApi.integration_status_using_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsInBetaPhaseApi.integration_status_using_post"
      end
      # resource path
      local_var_path = '/v2/meetings/integration/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IntegrationStatusResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsInBetaPhaseApi#integration_status_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Gong Meeting (/v2/meetings/{meetingId})
    # When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:update'.
    # @param body updateMeetingRequest
    # @param meeting_id Gong&#x27;s unique identifier for the meeting (up to 20 digits).
    # @param [Hash] opts the optional parameters
    # @return [UpdateMeetingResponse]
    def update_meeting_using_put(body, meeting_id, opts = {})
      data, _status_code, _headers = update_meeting_using_put_with_http_info(body, meeting_id, opts)
      data
    end

    # Update a Gong Meeting (/v2/meetings/{meetingId})
    # When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:meetings:user:update&#x27;.
    # @param body updateMeetingRequest
    # @param meeting_id Gong&#x27;s unique identifier for the meeting (up to 20 digits).
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateMeetingResponse, Integer, Hash)>] UpdateMeetingResponse data, response status code and response headers
    def update_meeting_using_put_with_http_info(body, meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsInBetaPhaseApi.update_meeting_using_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsInBetaPhaseApi.update_meeting_using_put"
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsInBetaPhaseApi.update_meeting_using_put"
      end
      # resource path
      local_var_path = '/v2/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'UpdateMeetingResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsInBetaPhaseApi#update_meeting_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
