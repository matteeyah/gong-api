=begin
#Gong API

#<h2>Overview</h2> <p> The Gong API allows you to: </p> <ol> <li> Receive the following information from Gong: <ol type=\"a\"> <li> Your company's <a href=\"#tag--Calls\">calls</a> in Gong </li> <li> Your company's <a href=\"#tag--Users\">users</a> in Gong </li> <li> Your company's user <a href=\"#tag--Stats\">stats</a> in Gong </li> <li> Your company's user <a href=\"#tag--Settings\">settings</a> in Gong </li> <li> Your company's <a href=\"#tag--Library\">libraries</a> in Gong </li> </ol></li> <li> <a href=\"#post-/v2/calls\">Upload</a> new or  <a href=\"#put-/v2/calls/-id-/media\">update</a>  call recordings in Gong, in order to support cases where you have an internal system that records  calls or obtains them from a third-party entity. </li> <li> <a href=\"#post-/v2/data-privacy/erase-data-for-email-address\">Data Privacy</a>:  Delete users and all their associated elements.</li> <li> Upload <a href=\"#tag--CRM\">CRM</a> data into Gong.  </li> </ol> <p>Base URL for all API calls is <a href=\"https://us-55616.api.gong.io\"> https://us-55616.api.gong.io </a> </p> <h2>Authentication</h2>  <p> There are two ways to retrieve credentials to the Gong Public API: </p> <ol><li>Retrieve Manually:<br> <p> In the <a href=\"https://app.gong.io/company/api\">Gong API Page</a> (you must be a technical administrator in Gong), click \"Create\" to receive an <b>Access Key</b>  and an <b>Access Key Secret</b>.<br> </p> <p> Use the Basic Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc7617.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Basic &lt;token&gt;</code><br> </p> <p> To create the basic token, combine the <b>Access Key</b> and the <b>Access Key Secret</b> with  colon (:) and then encode in Base64 as following:<br> <code>Base64(&lt;accessKey&gt; : &lt;accessKeySecret&gt;)</code><br><br> </p></li> <li>Retrieve through OAuth<br> <p> To obtain the Bearer token, follow the steps described in the <a target=\"_blank\" href=\"https://help.gong.io/hc/en-us/articles/360056677792\">Gong OAuth Guide</a>. <br></p> <p> After obtaining the token, use the Bearer Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc6750.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Bearer &lt;token&gt;</code> </p> </li></ol> <h2>Limits</h2>  <p> By default Gong limits your company's access to the service to 3 API calls per second, and 10,000 API calls per day. </p> <p> When the rate of API calls exceeds these limits an HTTP status code <b>429</b> is returned and a <b>Retry-After</b> header indicates  how many seconds to wait before making a new request. </p><p> If required, contact help@gong.io to change these limits. </p>  <h2>Cursors</h2>  <p> Some API calls that return a list are limited in the amount of records they may return, so multiple API calls may be  required to bring all records. Such an API call also returns a <b>records</b> field, which contains the number of records  in the current page, the current page number and the total number of records. </p> <p> In cases where the total number of records exceeds the number of records thus far retrieved, the <b>records</b> field will also  contain a <b>cursor</b> field which can be used to access the next page of records. To retrieve the next page, repeat the API call with  the <b>cursor</b> value as supplied by the previous API call. All other request inputs should remain the same. </p> <h2>Forward Compatibility</h2>  <p> When coding a system to accept Gong data, take into account that Gong may, without prior warning, add fields to the JSON output.  It is recommended to future proof your code so that it disregards all JSON fields you don't actually use.  </p><p></p>

OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

module GongAPI
  class AuditingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve logs data by type and time range (/v2/logs)
    # List log entries that took place during a specified time range.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:logs:read'.
    # @param from_date_time The time from which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC).
    # @param log_type Type of logs requested.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :to_date_time The time until which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the logs end with the latest recorded log.
    # @return [LogsResponse]
    def list_logs_using_get(from_date_time, log_type, opts = {})
      data, _status_code, _headers = list_logs_using_get_with_http_info(from_date_time, log_type, opts)
      data
    end

    # Retrieve logs data by type and time range (/v2/logs)
    # List log entries that took place during a specified time range.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:logs:read&#x27;.
    # @param from_date_time The time from which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC).
    # @param log_type Type of logs requested.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :to_date_time The time until which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the logs end with the latest recorded log.
    # @return [Array<(LogsResponse, Integer, Hash)>] LogsResponse data, response status code and response headers
    def list_logs_using_get_with_http_info(from_date_time, log_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuditingApi.list_logs_using_get ...'
      end
      # verify the required parameter 'from_date_time' is set
      if @api_client.config.client_side_validation && from_date_time.nil?
        fail ArgumentError, "Missing the required parameter 'from_date_time' when calling AuditingApi.list_logs_using_get"
      end
      # verify the required parameter 'log_type' is set
      if @api_client.config.client_side_validation && log_type.nil?
        fail ArgumentError, "Missing the required parameter 'log_type' when calling AuditingApi.list_logs_using_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['AccessLog', 'ExternallySharedCallAccess', 'ExternallySharedCallPlay', 'UserActivityLog', 'UserCallPlay'].include?(log_type)
        fail ArgumentError, "invalid value for 'log_type', must be one of AccessLog, ExternallySharedCallAccess, ExternallySharedCallPlay, UserActivityLog, UserCallPlay"
      end
      # resource path
      local_var_path = '/v2/logs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromDateTime'] = from_date_time
      query_params[:'logType'] = log_type
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'toDateTime'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LogsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditingApi#list_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
