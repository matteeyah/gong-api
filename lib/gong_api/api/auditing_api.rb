=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

module GongAPI
  class AuditingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve logs data by type and time range (/v2/logs)
    # List log entries that took place during a specified time range.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:logs:read'.
    # @param from_date_time The time from which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC).
    # @param log_type Type of logs requested.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :to_date_time The time until which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the logs end with the latest recorded log.
    # @return [LogsResponse]
    def list_logs_using_get(from_date_time, log_type, opts = {})
      data, _status_code, _headers = list_logs_using_get_with_http_info(from_date_time, log_type, opts)
      data
    end

    # Retrieve logs data by type and time range (/v2/logs)
    # List log entries that took place during a specified time range.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:logs:read&#x27;.
    # @param from_date_time The time from which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC).
    # @param log_type Type of logs requested.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :to_date_time The time until which to retrieve log records, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the logs end with the latest recorded log.
    # @return [Array<(LogsResponse, Integer, Hash)>] LogsResponse data, response status code and response headers
    def list_logs_using_get_with_http_info(from_date_time, log_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuditingApi.list_logs_using_get ...'
      end
      # verify the required parameter 'from_date_time' is set
      if @api_client.config.client_side_validation && from_date_time.nil?
        fail ArgumentError, "Missing the required parameter 'from_date_time' when calling AuditingApi.list_logs_using_get"
      end
      # verify the required parameter 'log_type' is set
      if @api_client.config.client_side_validation && log_type.nil?
        fail ArgumentError, "Missing the required parameter 'log_type' when calling AuditingApi.list_logs_using_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['AccessLog', 'ExternallySharedCallAccess', 'ExternallySharedCallPlay', 'UserActivityLog', 'UserCallPlay'].include?(log_type)
        fail ArgumentError, "invalid value for 'log_type', must be one of AccessLog, ExternallySharedCallAccess, ExternallySharedCallPlay, UserActivityLog, UserCallPlay"
      end
      # resource path
      local_var_path = '/v2/logs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromDateTime'] = from_date_time
      query_params[:'logType'] = log_type
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'toDateTime'] = opts[:'to_date_time'] if !opts[:'to_date_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LogsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditingApi#list_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
