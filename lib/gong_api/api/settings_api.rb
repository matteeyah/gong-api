=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

module GongAPI
  class SettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve scorecards details (/v2/settings/scorecards)
    # Retrieve all the scorecards within the Gong system.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:settings:scorecards:read'.
    # @param [Hash] opts the optional parameters
    # @return [Scorecards]
    def list_scorecards_using_get(opts = {})
      data, _status_code, _headers = list_scorecards_using_get_with_http_info(opts)
      data
    end

    # Retrieve scorecards details (/v2/settings/scorecards)
    # Retrieve all the scorecards within the Gong system.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:settings:scorecards:read&#x27;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Scorecards, Integer, Hash)>] Scorecards data, response status code and response headers
    def list_scorecards_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_scorecards_using_get ...'
      end
      # resource path
      local_var_path = '/v2/settings/scorecards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Scorecards' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_scorecards_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all company workspaces (/v2/workspaces)
    # Returns a list of all workspaces including their details.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:workspaces:read'.
    # @param [Hash] opts the optional parameters
    # @return [WorkspacesMetadata]
    def list_workspaces_using_get(opts = {})
      data, _status_code, _headers = list_workspaces_using_get_with_http_info(opts)
      data
    end

    # List all company workspaces (/v2/workspaces)
    # Returns a list of all workspaces including their details.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:workspaces:read&#x27;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspacesMetadata, Integer, Hash)>] WorkspacesMetadata data, response status code and response headers
    def list_workspaces_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.list_workspaces_using_get ...'
      end
      # resource path
      local_var_path = '/v2/workspaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'WorkspacesMetadata' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#list_workspaces_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
