=begin
#Gong API

#<h2>Overview</h2> <p> The Gong API allows you to: </p> <ol> <li> Receive the following information from Gong: <ol type=\"a\"> <li> Your company's <a href=\"#tag--Calls\">calls</a> in Gong </li> <li> Your company's <a href=\"#tag--Users\">users</a> in Gong </li> <li> Your company's user <a href=\"#tag--Stats\">stats</a> in Gong </li> <li> Your company's user <a href=\"#tag--Settings\">settings</a> in Gong </li> <li> Your company's <a href=\"#tag--Library\">libraries</a> in Gong </li> </ol></li> <li> <a href=\"#post-/v2/calls\">Upload</a> new or  <a href=\"#put-/v2/calls/-id-/media\">update</a>  call recordings in Gong, in order to support cases where you have an internal system that records  calls or obtains them from a third-party entity. </li> <li> <a href=\"#post-/v2/data-privacy/erase-data-for-email-address\">Data Privacy</a>:  Delete users and all their associated elements.</li> <li> Upload <a href=\"#tag--CRM\">CRM</a> data into Gong.  </li> </ol> <p>Base URL for all API calls is <a href=\"https://us-55616.api.gong.io\"> https://us-55616.api.gong.io </a> </p> <h2>Authentication</h2>  <p> There are two ways to retrieve credentials to the Gong Public API: </p> <ol><li>Retrieve Manually:<br> <p> In the <a href=\"https://app.gong.io/company/api\">Gong API Page</a> (you must be a technical administrator in Gong), click \"Create\" to receive an <b>Access Key</b>  and an <b>Access Key Secret</b>.<br> </p> <p> Use the Basic Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc7617.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Basic &lt;token&gt;</code><br> </p> <p> To create the basic token, combine the <b>Access Key</b> and the <b>Access Key Secret</b> with  colon (:) and then encode in Base64 as following:<br> <code>Base64(&lt;accessKey&gt; : &lt;accessKeySecret&gt;)</code><br><br> </p></li> <li>Retrieve through OAuth<br> <p> To obtain the Bearer token, follow the steps described in the <a target=\"_blank\" href=\"https://help.gong.io/hc/en-us/articles/360056677792\">Gong OAuth Guide</a>. <br></p> <p> After obtaining the token, use the Bearer Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc6750.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Bearer &lt;token&gt;</code> </p> </li></ol> <h2>Limits</h2>  <p> By default Gong limits your company's access to the service to 3 API calls per second, and 10,000 API calls per day. </p> <p> When the rate of API calls exceeds these limits an HTTP status code <b>429</b> is returned and a <b>Retry-After</b> header indicates  how many seconds to wait before making a new request. </p><p> If required, contact help@gong.io to change these limits. </p>  <h2>Cursors</h2>  <p> Some API calls that return a list are limited in the amount of records they may return, so multiple API calls may be  required to bring all records. Such an API call also returns a <b>records</b> field, which contains the number of records  in the current page, the current page number and the total number of records. </p> <p> In cases where the total number of records exceeds the number of records thus far retrieved, the <b>records</b> field will also  contain a <b>cursor</b> field which can be used to access the next page of records. To retrieve the next page, repeat the API call with  the <b>cursor</b> value as supplied by the previous API call. All other request inputs should remain the same. </p> <h2>Forward Compatibility</h2>  <p> When coding a system to accept Gong data, take into account that Gong may, without prior warning, add fields to the JSON output.  It is recommended to future proof your code so that it disregards all JSON fields you don't actually use.  </p><p></p>

OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

module GongAPI
  class CallsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add call media (/v2/calls/{id}/media)
    # Adds a call media, recorded by a telephony system (PBX) or other media recording facility. Gong accepts call recordings in various audio and video file formats, including WAV, MP3, MP4, MKV and FLAC. If uploading a dual-channel (stereo) file separated by speaker, make sure to specify which channel correspondsto the company team member (rep) in the parties/mediaChannelId parameter of the Add New Call operation.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:create'.
    # @param id callId returned from &#x27;Add New Call&#x27; request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media_file 
    # @return [NewCallRecordingResponse]
    def add_call_recording_using_put(id, opts = {})
      data, _status_code, _headers = add_call_recording_using_put_with_http_info(id, opts)
      data
    end

    # Add call media (/v2/calls/{id}/media)
    # Adds a call media, recorded by a telephony system (PBX) or other media recording facility. Gong accepts call recordings in various audio and video file formats, including WAV, MP3, MP4, MKV and FLAC. If uploading a dual-channel (stereo) file separated by speaker, make sure to specify which channel correspondsto the company team member (rep) in the parties/mediaChannelId parameter of the Add New Call operation.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:calls:create&#x27;.
    # @param id callId returned from &#x27;Add New Call&#x27; request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media_file 
    # @return [Array<(NewCallRecordingResponse, Integer, Hash)>] NewCallRecordingResponse data, response status code and response headers
    def add_call_recording_using_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.add_call_recording_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.add_call_recording_using_put"
      end
      # resource path
      local_var_path = '/v2/calls/{id}/media'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['mediaFile'] = opts[:'media_file'] if !opts[:'media_file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'NewCallRecordingResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#add_call_recording_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add new call (/v2/calls)
    # When using this endpoint, either provide a downloadMediaUrl or use the returned callId in a follow-up request to /v2/calls/{id}/media to upload the media file.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:create'.
    # @param body newCallAddingRequest
    # @param [Hash] opts the optional parameters
    # @return [NewCallAddingResponse]
    def add_call_using_post(body, opts = {})
      data, _status_code, _headers = add_call_using_post_with_http_info(body, opts)
      data
    end

    # Add new call (/v2/calls)
    # When using this endpoint, either provide a downloadMediaUrl or use the returned callId in a follow-up request to /v2/calls/{id}/media to upload the media file.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:calls:create&#x27;.
    # @param body newCallAddingRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(NewCallAddingResponse, Integer, Hash)>] NewCallAddingResponse data, response status code and response headers
    def add_call_using_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.add_call_using_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CallsApi.add_call_using_post"
      end
      # resource path
      local_var_path = '/v2/calls'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'NewCallAddingResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#add_call_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve transcripts of calls by date or callIds (/v2/calls/transcript)
    # Lists the transcripts of calls that took place during a specified date range and have specified callIds.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:transcript'.
    # @param body callsRequest
    # @param [Hash] opts the optional parameters
    # @return [CallTranscripts]
    def get_call_transcripts_using_post(body, opts = {})
      data, _status_code, _headers = get_call_transcripts_using_post_with_http_info(body, opts)
      data
    end

    # Retrieve transcripts of calls by date or callIds (/v2/calls/transcript)
    # Lists the transcripts of calls that took place during a specified date range and have specified callIds.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:calls:read:transcript&#x27;.
    # @param body callsRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallTranscripts, Integer, Hash)>] CallTranscripts data, response status code and response headers
    def get_call_transcripts_using_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.get_call_transcripts_using_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CallsApi.get_call_transcripts_using_post"
      end
      # resource path
      local_var_path = '/v2/calls/transcript'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CallTranscripts' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#get_call_transcripts_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve data for a specific call (/v2/calls/{id})
    # Retrieve data for a specific call.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.
    # @param id Gong&#x27;s unique numeric identifier for the call (up to 20 digits).
    # @param [Hash] opts the optional parameters
    # @return [SpecificCall]
    def get_call_using_get(id, opts = {})
      data, _status_code, _headers = get_call_using_get_with_http_info(id, opts)
      data
    end

    # Retrieve data for a specific call (/v2/calls/{id})
    # Retrieve data for a specific call.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:calls:read:basic&#x27;.
    # @param id Gong&#x27;s unique numeric identifier for the call (up to 20 digits).
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificCall, Integer, Hash)>] SpecificCall data, response status code and response headers
    def get_call_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.get_call_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.get_call_using_get"
      end
      # resource path
      local_var_path = '/v2/calls/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SpecificCall' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#get_call_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve detailed call data by various filters (/v2/calls/extensive)
    # Lists detailed call data for calls that took place during a specified date range, have specified call IDs or hosted by specified users.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:extensive'.  Moreover, clients requesting media download URLs by the contentSelector.exposedFields.media field should also have the scope 'api:calls:read:media-url'.
    # @param body callsRequest
    # @param [Hash] opts the optional parameters
    # @return [Calls]
    def list_calls_extensive_using_post(body, opts = {})
      data, _status_code, _headers = list_calls_extensive_using_post_with_http_info(body, opts)
      data
    end

    # Retrieve detailed call data by various filters (/v2/calls/extensive)
    # Lists detailed call data for calls that took place during a specified date range, have specified call IDs or hosted by specified users.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:calls:read:extensive&#x27;.  Moreover, clients requesting media download URLs by the contentSelector.exposedFields.media field should also have the scope &#x27;api:calls:read:media-url&#x27;.
    # @param body callsRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Calls, Integer, Hash)>] Calls data, response status code and response headers
    def list_calls_extensive_using_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.list_calls_extensive_using_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CallsApi.list_calls_extensive_using_post"
      end
      # resource path
      local_var_path = '/v2/calls/extensive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Calls' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#list_calls_extensive_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve call data by date range (/v2/calls)
    # List calls that took place during a specified date range.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.
    # @param from_date_time The date from which to list calls, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the calls start with the earliest recorded call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.
    # @param to_date_time The date until which to list calls, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the calls end with the latest recorded call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :workspace_id Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace.
    # @return [CallsResponse]
    def list_calls_using_get(from_date_time, to_date_time, opts = {})
      data, _status_code, _headers = list_calls_using_get_with_http_info(from_date_time, to_date_time, opts)
      data
    end

    # Retrieve call data by date range (/v2/calls)
    # List calls that took place during a specified date range.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:calls:read:basic&#x27;.
    # @param from_date_time The date from which to list calls, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the calls start with the earliest recorded call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.
    # @param to_date_time The date until which to list calls, in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified, the calls end with the latest recorded call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :workspace_id Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace.
    # @return [Array<(CallsResponse, Integer, Hash)>] CallsResponse data, response status code and response headers
    def list_calls_using_get_with_http_info(from_date_time, to_date_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.list_calls_using_get ...'
      end
      # verify the required parameter 'from_date_time' is set
      if @api_client.config.client_side_validation && from_date_time.nil?
        fail ArgumentError, "Missing the required parameter 'from_date_time' when calling CallsApi.list_calls_using_get"
      end
      # verify the required parameter 'to_date_time' is set
      if @api_client.config.client_side_validation && to_date_time.nil?
        fail ArgumentError, "Missing the required parameter 'to_date_time' when calling CallsApi.list_calls_using_get"
      end
      # resource path
      local_var_path = '/v2/calls'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromDateTime'] = from_date_time
      query_params[:'toDateTime'] = to_date_time
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CallsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#list_calls_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all calls that were manually associated with CRM objects (/v2/calls/manual-crm-associations) in Beta Phase
    # Returns a list of all calls that were manually associated or re-associated with CRM account and deal/opportunity since a given time.  Actions will be listed in the ascending order of their timing.   Notice if a call was associated and later re-associated the API will return both events.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:crm-calls:manual-association:read'.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :from_date_time Association time filter - only the associations made after that time will be listed. The time is in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified all association events will be listed.
    # @return [ManualAssociationResponse]
    def list_crm_calls_manual_association_using_get(opts = {})
      data, _status_code, _headers = list_crm_calls_manual_association_using_get_with_http_info(opts)
      data
    end

    # List all calls that were manually associated with CRM objects (/v2/calls/manual-crm-associations) in Beta Phase
    # Returns a list of all calls that were manually associated or re-associated with CRM account and deal/opportunity since a given time.  Actions will be listed in the ascending order of their timing.   Notice if a call was associated and later re-associated the API will return both events.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:crm-calls:manual-association:read&#x27;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
    # @option opts [String] :from_date_time Association time filter - only the associations made after that time will be listed. The time is in the ISO-8601 format (e.g., &#x27;2018-02-18T02:30:00-07:00&#x27; or &#x27;2018-02-18T08:00:00Z&#x27;, where Z stands for UTC); if not specified all association events will be listed.
    # @return [Array<(ManualAssociationResponse, Integer, Hash)>] ManualAssociationResponse data, response status code and response headers
    def list_crm_calls_manual_association_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.list_crm_calls_manual_association_using_get ...'
      end
      # resource path
      local_var_path = '/v2/calls/manual-crm-associations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'fromDateTime'] = opts[:'from_date_time'] if !opts[:'from_date_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ManualAssociationResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#list_crm_calls_manual_association_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
