=begin
#Gong API



OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

module GongAPI
  class LibraryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List of calls in a specific folder (/v2/library/folder-content)
    # Given a folder id, this endpoint retrieves a list of calls in it.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder_id Gong&#x27;s unique numeric identifier for the folder (up to 20 digits).
    # @return [LibraryFolderListOfCallsResponse]
    def get_calls_in_specific_folder_using_get(opts = {})
      data, _status_code, _headers = get_calls_in_specific_folder_using_get_with_http_info(opts)
      data
    end

    # List of calls in a specific folder (/v2/library/folder-content)
    # Given a folder id, this endpoint retrieves a list of calls in it.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:library:read&#x27;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder_id Gong&#x27;s unique numeric identifier for the folder (up to 20 digits).
    # @return [Array<(LibraryFolderListOfCallsResponse, Integer, Hash)>] LibraryFolderListOfCallsResponse data, response status code and response headers
    def get_calls_in_specific_folder_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_calls_in_specific_folder_using_get ...'
      end
      # resource path
      local_var_path = '/v2/library/folder-content'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'folderId'] = opts[:'folder_id'] if !opts[:'folder_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LibraryFolderListOfCallsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_calls_in_specific_folder_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve Library folders (/v2/library/folders)
    # Use this endpoint to retrieve a list of public library folders. We do not allow retrieval of either private or archived folders.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id Workspace identifier. We will retrieve folders which are related to this specific workspace.
    # @return [LibraryResponse]
    def get_library_structure_using_get(opts = {})
      data, _status_code, _headers = get_library_structure_using_get_with_http_info(opts)
      data
    end

    # Retrieve Library folders (/v2/library/folders)
    # Use this endpoint to retrieve a list of public library folders. We do not allow retrieval of either private or archived folders.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:library:read&#x27;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id Workspace identifier. We will retrieve folders which are related to this specific workspace.
    # @return [Array<(LibraryResponse, Integer, Hash)>] LibraryResponse data, response status code and response headers
    def get_library_structure_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_library_structure_using_get ...'
      end
      # resource path
      local_var_path = '/v2/library/folders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LibraryResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_library_structure_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
