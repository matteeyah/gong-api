=begin
#Gong API

#<h2>Overview</h2> <p> The Gong API allows you to: </p> <ol> <li> Receive the following information from Gong: <ol type=\"a\"> <li> Your company's <a href=\"#tag--Calls\">calls</a> in Gong </li> <li> Your company's <a href=\"#tag--Users\">users</a> in Gong </li> <li> Your company's user <a href=\"#tag--Stats\">stats</a> in Gong </li> <li> Your company's user <a href=\"#tag--Settings\">settings</a> in Gong </li> <li> Your company's <a href=\"#tag--Library\">libraries</a> in Gong </li> </ol></li> <li> <a href=\"#post-/v2/calls\">Upload</a> new or  <a href=\"#put-/v2/calls/-id-/media\">update</a>  call recordings in Gong, in order to support cases where you have an internal system that records  calls or obtains them from a third-party entity. </li> <li> <a href=\"#post-/v2/data-privacy/erase-data-for-email-address\">Data Privacy</a>:  Delete users and all their associated elements.</li> <li> Upload <a href=\"#tag--CRM\">CRM</a> data into Gong.  </li> </ol> <p>Base URL for all API calls is <a href=\"https://us-55616.api.gong.io\"> https://us-55616.api.gong.io </a> </p> <h2>Authentication</h2>  <p> There are two ways to retrieve credentials to the Gong Public API: </p> <ol><li>Retrieve Manually:<br> <p> In the <a href=\"https://app.gong.io/company/api\">Gong API Page</a> (you must be a technical administrator in Gong), click \"Create\" to receive an <b>Access Key</b>  and an <b>Access Key Secret</b>.<br> </p> <p> Use the Basic Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc7617.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Basic &lt;token&gt;</code><br> </p> <p> To create the basic token, combine the <b>Access Key</b> and the <b>Access Key Secret</b> with  colon (:) and then encode in Base64 as following:<br> <code>Base64(&lt;accessKey&gt; : &lt;accessKeySecret&gt;)</code><br><br> </p></li> <li>Retrieve through OAuth<br> <p> To obtain the Bearer token, follow the steps described in the <a target=\"_blank\" href=\"https://help.gong.io/hc/en-us/articles/360056677792\">Gong OAuth Guide</a>. <br></p> <p> After obtaining the token, use the Bearer Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc6750.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Bearer &lt;token&gt;</code> </p> </li></ol> <h2>Limits</h2>  <p> By default Gong limits your company's access to the service to 3 API calls per second, and 10,000 API calls per day. </p> <p> When the rate of API calls exceeds these limits an HTTP status code <b>429</b> is returned and a <b>Retry-After</b> header indicates  how many seconds to wait before making a new request. </p><p> If required, contact help@gong.io to change these limits. </p>  <h2>Cursors</h2>  <p> Some API calls that return a list are limited in the amount of records they may return, so multiple API calls may be  required to bring all records. Such an API call also returns a <b>records</b> field, which contains the number of records  in the current page, the current page number and the total number of records. </p> <p> In cases where the total number of records exceeds the number of records thus far retrieved, the <b>records</b> field will also  contain a <b>cursor</b> field which can be used to access the next page of records. To retrieve the next page, repeat the API call with  the <b>cursor</b> value as supplied by the previous API call. All other request inputs should remain the same. </p> <h2>Forward Compatibility</h2>  <p> When coding a system to accept Gong data, take into account that Gong may, without prior warning, add fields to the JSON output.  It is recommended to future proof your code so that it disregards all JSON fields you don't actually use.  </p><p></p>

OpenAPI spec version: V2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.37
=end

module GongAPI
  class PermissionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Give individual users access to calls (/v2/calls/users-access)
    # Give individual users access to calls.  If a user already has access (perhaps the call was shared with them, or they have access through their permission profiles) the request will have no effect.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.
    # @param body callsUsersAccessAddDto
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def add_users_access_to_calls_using_put(body, opts = {})
      data, _status_code, _headers = add_users_access_to_calls_using_put_with_http_info(body, opts)
      data
    end

    # Give individual users access to calls (/v2/calls/users-access)
    # Give individual users access to calls.  If a user already has access (perhaps the call was shared with them, or they have access through their permission profiles) the request will have no effect.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:call-user-access:write&#x27;.
    # @param body callsUsersAccessAddDto
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def add_users_access_to_calls_using_put_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.add_users_access_to_calls_using_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PermissionsApi.add_users_access_to_calls_using_put"
      end
      # resource path
      local_var_path = '/v2/calls/users-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'BaseResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#add_users_access_to_calls_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create permission profile (/v2/permission-profile)
    # Create a permission profile in a given workspace.
    # @param body permissionProfileDTO
    # @param workspace_id Workspace identifier.  You can retrieve the workspace using the \&quot;workspaces\&quot; (under \&quot;Settings\&quot;) API.
    # @param [Hash] opts the optional parameters
    # @return [PermissionProfileResponse]
    def create_permission_profile_using_post(body, workspace_id, opts = {})
      data, _status_code, _headers = create_permission_profile_using_post_with_http_info(body, workspace_id, opts)
      data
    end

    # Create permission profile (/v2/permission-profile)
    # Create a permission profile in a given workspace.
    # @param body permissionProfileDTO
    # @param workspace_id Workspace identifier.  You can retrieve the workspace using the \&quot;workspaces\&quot; (under \&quot;Settings\&quot;) API.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PermissionProfileResponse, Integer, Hash)>] PermissionProfileResponse data, response status code and response headers
    def create_permission_profile_using_post_with_http_info(body, workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.create_permission_profile_using_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PermissionsApi.create_permission_profile_using_post"
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling PermissionsApi.create_permission_profile_using_post"
      end
      # resource path
      local_var_path = '/v2/permission-profile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = workspace_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'PermissionProfileResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#create_permission_profile_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove specific individual users access from calls (/v2/calls/users-access)
    # Remove individual user access from calls. The request can only remove access previously given by the /v2/calls/users-access API.  If a given user does not have access to the call, they will be unaffected.  If a given user does have access to the call, but not through the pubic API (for example if the call was shared with the user), the user's access will remain unchanged.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.
    # @param body callsUsersAccessDeleteDto
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def delete_users_access_to_calls_using_delete(body, opts = {})
      data, _status_code, _headers = delete_users_access_to_calls_using_delete_with_http_info(body, opts)
      data
    end

    # Remove specific individual users access from calls (/v2/calls/users-access)
    # Remove individual user access from calls. The request can only remove access previously given by the /v2/calls/users-access API.  If a given user does not have access to the call, they will be unaffected.  If a given user does have access to the call, but not through the pubic API (for example if the call was shared with the user), the user&#x27;s access will remain unchanged.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:call-user-access:write&#x27;.
    # @param body callsUsersAccessDeleteDto
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def delete_users_access_to_calls_using_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.delete_users_access_to_calls_using_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PermissionsApi.delete_users_access_to_calls_using_delete"
      end
      # resource path
      local_var_path = '/v2/calls/users-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'BaseResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#delete_users_access_to_calls_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Permission profile for a given profile Id (/v2/permission-profile)
    # Returns a permission profile.
    # @param profile_id Permission profile identifier.
    # @param [Hash] opts the optional parameters
    # @return [PermissionProfileResponse]
    def get_permission_profile_using_get(profile_id, opts = {})
      data, _status_code, _headers = get_permission_profile_using_get_with_http_info(profile_id, opts)
      data
    end

    # Permission profile for a given profile Id (/v2/permission-profile)
    # Returns a permission profile.
    # @param profile_id Permission profile identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PermissionProfileResponse, Integer, Hash)>] PermissionProfileResponse data, response status code and response headers
    def get_permission_profile_using_get_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.get_permission_profile_using_get ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling PermissionsApi.get_permission_profile_using_get"
      end
      # resource path
      local_var_path = '/v2/permission-profile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'profileId'] = profile_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PermissionProfileResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#get_permission_profile_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve users that have specific individual access to calls (/v2/calls/users-access)
    # Returns a list of users who have received individual access to calls through the API.  This endpoint doesn't cover user that have access for other reasons (such as sharing recipients, or access through permission profiles).  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:read'.
    # @param body callsAccessGetDto
    # @param [Hash] opts the optional parameters
    # @return [CallsAccessDetailsResponse]
    def get_users_access_to_calls_using_get(body, opts = {})
      data, _status_code, _headers = get_users_access_to_calls_using_get_with_http_info(body, opts)
      data
    end

    # Retrieve users that have specific individual access to calls (/v2/calls/users-access)
    # Returns a list of users who have received individual access to calls through the API.  This endpoint doesn&#x27;t cover user that have access for other reasons (such as sharing recipients, or access through permission profiles).  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:call-user-access:read&#x27;.
    # @param body callsAccessGetDto
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallsAccessDetailsResponse, Integer, Hash)>] CallsAccessDetailsResponse data, response status code and response headers
    def get_users_access_to_calls_using_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.get_users_access_to_calls_using_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PermissionsApi.get_users_access_to_calls_using_get"
      end
      # resource path
      local_var_path = '/v2/calls/users-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CallsAccessDetailsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#get_users_access_to_calls_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all users attached to a given permission profile (/v2/permission-profile/users)
    # Returns a list of all users whose access is controlled by the given permission profile.  When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
    # @param profile_id Permission profile identifier.
    # @param [Hash] opts the optional parameters
    # @return [PermissionProfileUsersResponse]
    def list_permission_profile_users_using_get(profile_id, opts = {})
      data, _status_code, _headers = list_permission_profile_users_using_get_with_http_info(profile_id, opts)
      data
    end

    # List all users attached to a given permission profile (/v2/permission-profile/users)
    # Returns a list of all users whose access is controlled by the given permission profile.  When accessed through a Bearer token authorization method, this endpoint requires the scope &#x27;api:users:read&#x27;.
    # @param profile_id Permission profile identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PermissionProfileUsersResponse, Integer, Hash)>] PermissionProfileUsersResponse data, response status code and response headers
    def list_permission_profile_users_using_get_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.list_permission_profile_users_using_get ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling PermissionsApi.list_permission_profile_users_using_get"
      end
      # resource path
      local_var_path = '/v2/permission-profile/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'profileId'] = profile_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PermissionProfileUsersResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#list_permission_profile_users_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all company permission profiles for a given workspace (/v2/all-permission-profiles)
    # Returns a list of all permission profiles.  The listing is in the alphabetical order of the profile names.
    # @param workspace_id Workspace identifier, the API will return only the profiles belonging to this workspace.  You can retrieve the workspace using the \&quot;workspaces\&quot; (under \&quot;Settings\&quot;) API.
    # @param [Hash] opts the optional parameters
    # @return [PermissionProfilesResponse]
    def list_permission_profile_using_get(workspace_id, opts = {})
      data, _status_code, _headers = list_permission_profile_using_get_with_http_info(workspace_id, opts)
      data
    end

    # List all company permission profiles for a given workspace (/v2/all-permission-profiles)
    # Returns a list of all permission profiles.  The listing is in the alphabetical order of the profile names.
    # @param workspace_id Workspace identifier, the API will return only the profiles belonging to this workspace.  You can retrieve the workspace using the \&quot;workspaces\&quot; (under \&quot;Settings\&quot;) API.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PermissionProfilesResponse, Integer, Hash)>] PermissionProfilesResponse data, response status code and response headers
    def list_permission_profile_using_get_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.list_permission_profile_using_get ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling PermissionsApi.list_permission_profile_using_get"
      end
      # resource path
      local_var_path = '/v2/all-permission-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = workspace_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PermissionProfilesResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#list_permission_profile_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update permission profile (/v2/permission-profile)
    # Update a permission profile.
    # @param body permissionProfileDTO
    # @param profile_id Permission profile identifier.
    # @param [Hash] opts the optional parameters
    # @return [PermissionProfileResponse]
    def update_permission_profile_using_put(body, profile_id, opts = {})
      data, _status_code, _headers = update_permission_profile_using_put_with_http_info(body, profile_id, opts)
      data
    end

    # Update permission profile (/v2/permission-profile)
    # Update a permission profile.
    # @param body permissionProfileDTO
    # @param profile_id Permission profile identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PermissionProfileResponse, Integer, Hash)>] PermissionProfileResponse data, response status code and response headers
    def update_permission_profile_using_put_with_http_info(body, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.update_permission_profile_using_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PermissionsApi.update_permission_profile_using_put"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling PermissionsApi.update_permission_profile_using_put"
      end
      # resource path
      local_var_path = '/v2/permission-profile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'profileId'] = profile_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'PermissionProfileResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#update_permission_profile_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
